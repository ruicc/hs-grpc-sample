{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports       #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing       #-}
{-# OPTIONS_GHC -fno-warn-unused-matches       #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Proto.Greet where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
 
data Greet request response = Greet{greethello ::
                                    request 'HsGRPC.Normal Proto.Greet.HelloReq Proto.Greet.HelloRes
                                      -> Hs.IO (response 'HsGRPC.Normal Proto.Greet.HelloRes)}
                            deriving Hs.Generic
 
greetServer ::
              Greet HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                HsGRPC.ServiceOptions -> Hs.IO ()
greetServer Greet{greethello = greethello}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger
     serverMaxReceiveMessageLength serverMaxMetadataSize)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler (HsGRPC.MethodName "/proto.Greet/hello")
                                   (HsGRPC.convertGeneratedServerHandler greethello))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger,
                             optMaxReceiveMessageLength = serverMaxReceiveMessageLength,
                             optMaxMetadataSize = serverMaxMetadataSize})
 
greetClient ::
              HsGRPC.Client ->
                Hs.IO (Greet HsGRPC.ClientRequest HsGRPC.ClientResult)
greetClient client
  = (Hs.pure Greet) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/proto.Greet/hello")))
 
newtype HelloReq = HelloReq{helloReqName :: Hs.Text}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named HelloReq where
        nameOf _ = (Hs.fromString "HelloReq")
 
instance HsProtobuf.HasDefault HelloReq
 
instance HsProtobuf.Message HelloReq where
        encodeMessage _ HelloReq{helloReqName = helloReqName}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   helloReqName)])
        decodeMessage _
          = (Hs.pure HelloReq) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "name")
                []
                "")]
 
instance HsJSONPB.ToJSONPB HelloReq where
        toJSONPB (HelloReq f1) = (HsJSONPB.object ["name" .= f1])
        toEncodingPB (HelloReq f1) = (HsJSONPB.pairs ["name" .= f1])
 
instance HsJSONPB.FromJSONPB HelloReq where
        parseJSONPB
          = (HsJSONPB.withObject "HelloReq"
               (\ obj -> (Hs.pure HelloReq) <*> obj .: "name"))
 
instance HsJSONPB.ToJSON HelloReq where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON HelloReq where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema HelloReq where
        declareNamedSchema _
          = do let declare_name = HsJSONPB.declareSchemaRef
               helloReqName <- declare_name Proxy.Proxy
               let _ = Hs.pure HelloReq <*> HsJSONPB.asProxy declare_name
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "HelloReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("name", helloReqName)]}})
 
newtype HelloRes = HelloRes{helloResGreet :: Hs.Text}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named HelloRes where
        nameOf _ = (Hs.fromString "HelloRes")
 
instance HsProtobuf.HasDefault HelloRes
 
instance HsProtobuf.Message HelloRes where
        encodeMessage _ HelloRes{helloResGreet = helloResGreet}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   helloResGreet)])
        decodeMessage _
          = (Hs.pure HelloRes) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "greet")
                []
                "")]
 
instance HsJSONPB.ToJSONPB HelloRes where
        toJSONPB (HelloRes f1) = (HsJSONPB.object ["greet" .= f1])
        toEncodingPB (HelloRes f1) = (HsJSONPB.pairs ["greet" .= f1])
 
instance HsJSONPB.FromJSONPB HelloRes where
        parseJSONPB
          = (HsJSONPB.withObject "HelloRes"
               (\ obj -> (Hs.pure HelloRes) <*> obj .: "greet"))
 
instance HsJSONPB.ToJSON HelloRes where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON HelloRes where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema HelloRes where
        declareNamedSchema _
          = do let declare_greet = HsJSONPB.declareSchemaRef
               helloResGreet <- declare_greet Proxy.Proxy
               let _ = Hs.pure HelloRes <*> HsJSONPB.asProxy declare_greet
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "HelloRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("greet", helloResGreet)]}})